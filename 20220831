함수를 쓰느냐 마느냐..
- 코드를 한 "문단"으로 정리 - 완전한 아이디어를 저장해두고 "명명"
- 번복하지 말기 . 한 번에 작동하도록 만들어서 재사용
- 코드가 너무 길어지거나 복잡해지면, 논리 상 나누어서 각 조각을 함수 안에 집어 넣기
- 일반적으로 자주 사용하는 것은 라이브러리화 . 동료와 공유해도 좋음
- 무조건.. 나누고.. 쪼개고.. 단순하게.. => 간단하게 !!!!

자리수 설정
- %d : 정수(10진수)         
- %f : 실수         ex) %0.2f : 소수2자리까지 , %0.3f : 소수3자리까지
- %s : 문자열
- %c : 단일문자
- %x : 16진수

# 1 문자열 출력
x = 1
y = 2
print('X = %d, Y = %d, X + Y = %d' %(x,y,x+y))
print('X = {}, Y = {}, X + Y = {}'.format(x,y,x+y))         # 포맷 출력
print(f'X = {x}, Y = {y}, X + Y = {x+y}')                   # 보간문자열 출력
s = f'X = {x}, Y = {y}, X + Y = {x+y}'                      # 다른 변수에 저장 가능
print(s)
a = f'X = {x}, Y = {y}, X + Y = {x+y}, str = {"test"}'      # 문자열 추가 할 땐 따옴표 구분!
print(a)


# 2 자리수 고정 (정수%d, 실수(소수)%f, 문자열%s, 단일문자%c)
st1 = f'str = {"%10s"%"test"}'                              # 10자리 공백 설정
print(st1)
st2 = f'str = {"[%10s]"%"test"}'
print(st2)

s1 = f'X = {"[%10d]"%x}, Y = {y}, X + Y = {x+y}'
print(s1)


# 3 아스키코드 값 출력 (%c 이용)
q = 50
c1 = f'문자코드 value : {q} => 문자 : [{"%c"%q}]'
print(c1)
w = 80
c2 = f'문자코드 value : {w} => 문자 : [{"%c"%w}]'
print(c2)


# 4 문자열 비교 (사전 생각하면 됨)
a = 'abc'
b = 'abc1'
print(a > b)
print(a == b)
print(a < b)
print(a >= b)
print(a <= b)
